locales <- system("locale -a", intern = TRUE)
solvme <- function(x) sum((1+x/12)^(0:71))*13662
solvme()
solvme=1000000
solvme <- function(x) sum((1+x/12)^(0:71))*13662
uniroot(solvme,interval = c(-1e+08,1e+08))
uniroot(solvme)
uniroot(solvme,interval = c(-1,1))
uniroot(solvme,interval = c(-10000,10000))
View(solvme)
solvme(0.02)
solvme(0.01)
solvme(0.005)
solvme(0.0057)
solvme(0.00565)
solvme(0.00564)
solvme(0.00560)
solvme(0.00555)
solvme(0.00557)
solvme(0.00553)
solvme(0.005565)
solvme(0.005562)
solvme(0.005560)
solvme(0.005559)
solvme(0.005557)
solvme(0.005551)
solvme(0.005553)
solvme(0.005555)
solvme(0.005554)
solvme(0.0055535)
solvme(0.00555335)
seq(-5,5,0.01)
seq(0,1,0.0000005)
plot(solvme(seq(0,1,0.0000005)))
plot(solvme(list(seq(0,1,0.0000005))))
solvme(seq(0,1,0.0000005))
for(x in seq(0,1,0.0000005))solvme(x)
x
for(x in seq(0,1,0.0000005)) solvme(x) -> ccc
plot(x=seq(0,1,0.05),solvme(x),)
plot(x=seq(0,1,0.05),solvme(x))
plot(x,solvme(x))
solvme(0)
solvme
a <- 0:71
sum((1+x/12)^a)*13662
yy <- function(x) sum((1+x/12)^a)*13662
yy(0)
yy(1)
yy <- function(x) sum((1+x/1200)^a)*13662
yy(1)
yy(2)
yy(3)
yy(0.555)
yy <- function(x){sum((1+x/1200)^a)*13662 - 1000000}
yy(0)
yy(1)
plot(x,yy(x),ylim =0)
plot(x,yy(x),ylim =c(-10,10))
plot(x,yy(x),ylim =c(-3,3))
plot(seq(0,3,0.001),yy(x),ylim =c(-3,3),)
plot(seq(0,3,1),yy(x),ylim =c(-3,3),)
plot(seq(0,3,0.01),yy(x),ylim =c(-3,3),type = "l")
plot(seq(0,3,0.01),yy(seq(0,3,0.01)),ylim =c(-3,3),type = "l")
yy <- function(x){for(a in 0:71) sum((1+(x/1200))^a)*13662 - 1000000}
plot(seq(0,3,0.01),yy(seq(0,3,0.01)),ylim =c(-3,3),type = "l")
plot(seq(0,2,0.0001),yy(seq(0,2,0.0001)),ylim =c(0,2),type = "l")
plot(seq(0,1,0.0001),yy(seq(0,1,0.0001)),ylim =c(0,2),type = "l")
seq(0,1,0.0001)
plot(seq(0,1,0.0001),yy(seq(0,1,0.0001)),type = "l")
seq(0,1,0.0001) -> x
plot(x,yy(x),ylim = c(-1,1),type = "l")
plot(x,yy(x),ylim = c(0,1),type = "l")
rm(list=ls())
dir()
setwd("D:\\Documents\\Dropbox\\MyEssay\\newRdode")
setwd("D:\\Documents\\Dropbox\\MyEssay\\newRdode")
Sys.getlocale()
quit()
for(pklist in c('readxl','xlsx','plyr','dplyr','knitr','data.table',
'grid','gridExtra','ggplot2','zoo','R.oo','R.utils','psych',
'robustHD','rbenchmark','foreign','rgl','stargazer','rmarkdown','DiagrammeR',
'DiagrammeRsvg','magrittr','svglite','rsvg','png')){
Install.pack <- cmpfun(function(lists=pklist){
pklist <- lists
new.packages <- pklist[!(pklist %in% installed.packages()[,"Package"])]
if(length(new.packages)){install.packages(new.packages)}else{update.packages(pklist)}
})
Load.pack <- cmpfun(function(list=as.list(packtogo)){lapply(pklist, require, character.only = TRUE)})
# 安裝所有未安裝之套件
Install.pack()
# 讀入所有需要之套件
# 注意，需所有回應皆顯示"TRUE"才能繼續往下，若Load.pack()回應出現FALSE，請至下方[Q&A](#qa)排除問題。d.pack()
}
library(compiler)
for(pklist in c('readxl','xlsx','plyr','dplyr','knitr','data.table',
'grid','gridExtra','ggplot2','zoo','R.oo','R.utils','psych',
'robustHD','rbenchmark','foreign','rgl','stargazer','rmarkdown','DiagrammeR',
'DiagrammeRsvg','magrittr','svglite','rsvg','png')){
Install.pack <- cmpfun(function(lists=pklist){
pklist <- lists
new.packages <- pklist[!(pklist %in% installed.packages()[,"Package"])]
if(length(new.packages)){install.packages(new.packages)}else{update.packages(pklist)}
})
Load.pack <- cmpfun(function(list=as.list(packtogo)){lapply(pklist, require, character.only = TRUE)})
# 安裝所有未安裝之套件
Install.pack()
# 讀入所有需要之套件
# 注意，需所有回應皆顯示"TRUE"才能繼續往下，若Load.pack()回應出現FALSE，請至下方[Q&A](#qa)排除問題。d.pack()
}
#+ flowchart ,echo=FALSE, include=FALSE
flowchart1 <- cmpfun(function(
nodes = c('研究動機','研究目的','研究架構及流程','探討企業避稅行為之相關文獻','探討企業競爭策略之相關文獻','探討產業競爭程度之相關文獻','研究假說與設計','樣本選取','實證分析','結論與建議'),
from = c('研究動機','研究目的','研究架構及流程','研究架構及流程','研究架構及流程','探討企業避稅行為之相關文獻','探討企業競爭策略之相關文獻','探討產業競爭程度之相關文獻','研究假說與設計','樣本選取','實證分析'),
to = c('研究目的','研究架構及流程','探討企業避稅行為之相關文獻','探討企業競爭策略之相關文獻','探討產業競爭程度之相關文獻','研究假說與設計','研究假說與設計','研究假說與設計','樣本選取','實證分析','結論與建議')
){flow <- create_graph(
nodes_df = create_nodes(nodes = nodes,
label = FALSE,
shape = 'rectangle'
),
edges_df = create_edges(from = from,
to = to,
rel = 'requires',
color = 'black'
),
node_attrs = c("fontname = Helvetica",
"width = 2",
"height = 0.7",
"fontsize = 15"),
edge_attrs = c("color = gray20",
"arrowsize = 0.5"))
flow %>% export_graph(file_name = "flow1.png", file_type = "PNG",height = 3620, width = 2500)
})
flowchart1()
#+ flowchart ,echo=FALSE, include=FALSE
flowchart1 <- function(
nodes = c('研究動機','研究目的','研究架構及流程','探討企業避稅行為之相關文獻','探討企業競爭策略之相關文獻','探討產業競爭程度之相關文獻','研究假說與設計','樣本選取','實證分析','結論與建議'),
from = c('研究動機','研究目的','研究架構及流程','研究架構及流程','研究架構及流程','探討企業避稅行為之相關文獻','探討企業競爭策略之相關文獻','探討產業競爭程度之相關文獻','研究假說與設計','樣本選取','實證分析'),
to = c('研究目的','研究架構及流程','探討企業避稅行為之相關文獻','探討企業競爭策略之相關文獻','探討產業競爭程度之相關文獻','研究假說與設計','研究假說與設計','研究假說與設計','樣本選取','實證分析','結論與建議')
){flow <- create_graph(
nodes_df = create_nodes(nodes = nodes,
label = FALSE,
shape = 'rectangle'
),
edges_df = create_edges(from = from,
to = to,
rel = 'requires',
color = 'black'
),
node_attrs = c("fontname = Helvetica",
"width = 2",
"height = 0.7",
"fontsize = 15"),
edge_attrs = c("color = gray20",
"arrowsize = 0.5"))
flow %>% export_graph(file_name = "flow1.png", file_type = "PNG",height = 3620, width = 2500)
}
flowchart1()
Load.pack()
for(pklist in c('readxl','xlsx','plyr','dplyr','knitr','data.table',
'grid','gridExtra','ggplot2','zoo','R.oo','R.utils','psych',
'robustHD','rbenchmark','foreign','rgl','stargazer','rmarkdown','DiagrammeR',
'DiagrammeRsvg','magrittr','svglite','rsvg','png')){
Install.pack <- cmpfun(function(lists=pklist){
pklist <- lists
new.packages <- pklist[!(pklist %in% installed.packages()[,"Package"])]
if(length(new.packages)){install.packages(new.packages)}else{update.packages(pklist)}
})
Load.pack <- cmpfun(function(list=as.list(packtogo)){lapply(pklist, require, character.only = TRUE)})
# 安裝所有未安裝之套件
Install.pack()
Load.pack()
# 讀入所有需要之套件
# 注意，需所有回應皆顯示"TRUE"才能繼續往下，若Load.pack()回應出現FALSE，請至下方[Q&A](#qa)排除問題。d.pack()
}
#+ flowchart ,echo=FALSE, include=FALSE
flowchart1 <- function(
nodes = c('研究動機','研究目的','研究架構及流程','探討企業避稅行為之相關文獻','探討企業競爭策略之相關文獻','探討產業競爭程度之相關文獻','研究假說與設計','樣本選取','實證分析','結論與建議'),
from = c('研究動機','研究目的','研究架構及流程','研究架構及流程','研究架構及流程','探討企業避稅行為之相關文獻','探討企業競爭策略之相關文獻','探討產業競爭程度之相關文獻','研究假說與設計','樣本選取','實證分析'),
to = c('研究目的','研究架構及流程','探討企業避稅行為之相關文獻','探討企業競爭策略之相關文獻','探討產業競爭程度之相關文獻','研究假說與設計','研究假說與設計','研究假說與設計','樣本選取','實證分析','結論與建議')){
flow <- create_graph(
nodes_df = create_nodes(nodes = nodes,
label = FALSE,
shape = 'rectangle'
),
edges_df = create_edges(from = from,
to = to,
rel = 'requires',
color = 'black'
),
node_attrs = c("fontname = Helvetica",
"width = 2",
"height = 0.7",
"fontsize = 15"),
edge_attrs = c("color = gray20",
"arrowsize = 0.5"))
flow %>% export_graph(file_name = "flow1.png", file_type = "PNG",height = 3620, width = 2500)
}
flowchart1()
readDB <- cmpfun(function(fil = "DB2.xlsx", attr_sht = "TEJ_attr", xls_sht = "TEJ"){
DBattr <- read_excel(fil, sheet=attr_sht, col_names = TRUE)
# read in excel database: DB2.xlsx, excel sheet: TEJ, with column names.
DBori <- read_excel(fil, sheet=xls_sht, col_names = TRUE, col_types = DBattr$attr)
# rename columns
setnames(DBori,old=as.character(DBattr$old), new=as.character(DBattr$new))
return(DBori)
})
TEJ <- readDB(fil = "DB2.xlsx", attr_sht = "TEJ_attr", xls_sht = "TEJ")
DBfilter <- cmpfun(function(x = TEJ,filt='filtered'){
DB <- as.data.table(x)
DB$year <- year(DB$date)
DB0 <- DB[,.SD[.N > 0],by=list(TSE_code,year)]
DB1 <- DB0[!(DB0$TSE_code %in% c('M2800','M9900','M2331','W91'))] # M2800金融業 # M9900其他 # M2331其他電子 # W91存託憑證
DB2 <- DB1[,.SD[.N >= 5],by=list(TSE_code,year)] # removed M1800<2001-2005>,M2200<2001>
DB3 <- DB2[!(DB2$FAMILY %in% NA) & # most family with NA got lots of NAs in other columns
!(DB2$PB %in% NA) & # important var, must not be NA
!(DB2$TA %in% NA) & # denominator or main var as PPE, ROA, SIZE, LEV, INTANG, must not bo NA.
!(DB2$NetSales %in% c(0,NA)) & # remove netsales = 0 ... Denominator of (RD,EMP,MARKET),HHI's main var,
!(DB2$employee %in% NA)]
DB4 <- rbind(DB0,DB3)
DB4 <- DB4[order(DB4$TSE_code,DB4$year),]
DB5 <- DB4[!(duplicated(DB4) | duplicated(DB4, fromLast = TRUE)),]
base::ifelse(filt=='filtered', return(DB2), base::ifelse(filt=='dropped', return(DB5), print("please assign filter type")))
}) # 篩選後的:filt=filtered, #篩選刪掉的filt=dropped
TEJ01 <- DBfilter(x = TEJ,filt = 'filtered')
TEJ02 <- DBfilter(x = TEJ,filt = 'dropped')
18978+6459
DBfilter <- function(x = TEJ,filt='filtered'){
DB <- as.data.table(x)
DB$year <- year(DB$date)
DB0 <- DB[,.SD[.N > 0],by=list(TSE_code,year)]
DB1 <- DB0[!(DB0$TSE_code %in% c('M2800','M9900','M2331','W91'))] # M2800金融業 # M9900其他 # M2331其他電子 # W91存託憑證
DB2 <- DB1[,.SD[.N >= 5],by=list(TSE_code,year)] # removed M1800<2001-2005>,M2200<2001>
DB3 <- DB2[!(DB2$FAMILY %in% NA) & # most family with NA got lots of NAs in other columns
!(DB2$PB %in% NA) & # important var, must not be NA
!(DB2$TA %in% NA) & # denominator or main var as PPE, ROA, SIZE, LEV, INTANG, must not bo NA.
!(DB2$NetSales %in% c(0,NA)) & # remove netsales = 0 ... Denominator of (RD,EMP,MARKET),HHI's main var,
!(DB2$employee %in% NA)]
DB4 <- rbind(DB0,DB3)
DB4 <- DB4[order(DB4$TSE_code,DB4$year),]
DB5 <- DB4[!(duplicated(DB4) | duplicated(DB4, fromLast = TRUE)),]
base::ifelse(filt=='filtered', return(DB2), base::ifelse(filt=='dropped', return(DB5), print("please assign filter type")))
} # 篩選後的:filt=filtered, #篩選刪掉的filt=dropped
TEJ01 <- DBfilter(x = TEJ,filt = 'filtered')
TEJ02 <- DBfilter(x = TEJ,filt = 'dropped')
summary(TEJ01)
TEJ01_2010 <- TEJ01[(TEJ01$year %in% seq(2001,2010))]
summary(TEJ01_2010$year)
table(TEJ01$year)
table(TEJ01_2010$year)
NAto0 <- cmpfun(function(x = 'TEJ01',col=c(NA)){
x1 <- captureOutput(
for(y in col){cat(x,'$',y,'[is.na(',x,'$',y,')] <- 0',sep="",fill = TRUE)})
x2 <- captureOutput(cat('return(',paste(x),')',sep=""))
xx <- c(x1,x2)
eval(base::parse(text=xx))})
TEJ1 <- NAto0(x ='TEJ01',col=c('OERD','OEPRO','Land','LandR','CTP_IFRS_CFI','CTP_IFRS_CFO','CTP_IFRS_CFF','CTP_GAAP'))
TEJ1_2010 <- NAto0(x ='TEJ01_2010',col=c('OERD','OEPRO','Land','LandR','CTP_IFRS_CFI','CTP_IFRS_CFO','CTP_IFRS_CFF','CTP_GAAP'))
control_var <- cmpfun(function(x=TEJ1){
y <- transform(x,
ROA = as.numeric(PTEBX) / as.numeric(TA), # ROA : NetSales / TotalAssets
SIZE = as.numeric(log(x = as.numeric(TA), base = exp(1))), # SIZE : ln(TA)
LEV = as.numeric(TL) / as.numeric(TA), # LEV : TL / TA
INTANG = as.numeric(INTAN) / as.numeric(TA), # INTANG : intangible assets / TA
QUICK = ifelse(is.na(QUICK),0,as.numeric(QUICK)), # QUICK : = QUICK
EQINC = as.numeric(-(InvIn + InvLoss)) / as.numeric(TA), # EQINC : (InvIn + InvLos) / -TA
OUTINSTI = ifelse(is.na(OUTINSTI),0,as.numeric(OUTINSTI)), # OUTINSTI : = OUTINSTI
RELATIN = ifelse(is.na(RELATIN),0,as.numeric(RELATIN)),
RELATOUT = ifelse(is.na(RELATOUT),0,as.numeric(RELATOUT)),
FAM_Dum = ifelse(FAMILY == 'F', 1, 0)
)
DB <- as.data.table(y[order(y$company,y$year),]) # sort by company<ascending> and year<ascending>
return(DB)})
control_var <- function(x=TEJ1){
y <- transform(x,
ROA = as.numeric(PTEBX) / as.numeric(TA), # ROA : NetSales / TotalAssets
SIZE = as.numeric(log(x = as.numeric(TA), base = exp(1))), # SIZE : ln(TA)
LEV = as.numeric(TL) / as.numeric(TA), # LEV : TL / TA
INTANG = as.numeric(INTAN) / as.numeric(TA), # INTANG : intangible assets / TA
QUICK = ifelse(is.na(QUICK),0,as.numeric(QUICK)), # QUICK : = QUICK
EQINC = as.numeric(-(InvIn + InvLoss)) / as.numeric(TA), # EQINC : (InvIn + InvLos) / -TA
OUTINSTI = ifelse(is.na(OUTINSTI),0,as.numeric(OUTINSTI)), # OUTINSTI : = OUTINSTI
RELATIN = ifelse(is.na(RELATIN),0,as.numeric(RELATIN)),
RELATOUT = ifelse(is.na(RELATOUT),0,as.numeric(RELATOUT)),
FAM_Dum = ifelse(FAMILY == 'F', 1, 0)
)
DB <- as.data.table(y[order(y$company,y$year),]) # sort by company<ascending> and year<ascending>
return(DB)}
TEJ2 <- control_var(x=TEJ1)
DBfilter <- function(x = TEJ,filt='filtered'){
DB <- as.data.table(x)
DB$year <- year(DB$date)
DB0 <- DB[,.SD[.N > 0],by=list(TSE_code,year)]
DB1 <- DB0[!(DB0$TSE_code %in% c('M2800','M9900','M2331','W91'))] # M2800金融業 # M9900其他 # M2331其他電子 # W91存託憑證
DB2 <- DB1[,.SD[.N >= 5],by=list(TSE_code,year)] # removed M1800<2001-2005>,M2200<2001>
DB3 <- DB2[!(DB2$FAMILY %in% NA) & # most family with NA got lots of NAs in other columns
!(DB2$PB %in% NA) & # important var, must not be NA
!(DB2$TA %in% NA) & # denominator or main var as PPE, ROA, SIZE, LEV, INTANG, must not bo NA.
!(DB2$NetSales %in% c(0,NA)) & # remove netsales = 0 ... Denominator of (RD,EMP,MARKET),HHI's main var,
!(DB2$employee %in% NA)]
DB4 <- rbind(DB0,DB3)
DB4 <- DB4[order(DB4$TSE_code,DB4$year),]
DB5 <- DB4[!(duplicated(DB4) | duplicated(DB4, fromLast = TRUE)),]
base::ifelse(filt=='filtered', return(DB3), base::ifelse(filt=='dropped', return(DB5), print("please assign filter type")))
}
TEJ01 <- DBfilter(x = TEJ,filt = 'filtered')
TEJ02 <- DBfilter(x = TEJ,filt = 'dropped')
15725+6459
TEJ01_2010 <- TEJ01[(TEJ01$year %in% seq(2001,2010))]
TEJ02_2010 <- TEJ02[(TEJ02$year %in% seq(2001,2010))]
9133+4962
10959/13633
9133/14095
TEJ1 <- NAto0(x ='TEJ01',col=c('OERD','OEPRO','Land','LandR','CTP_IFRS_CFI','CTP_IFRS_CFO','CTP_IFRS_CFF','CTP_GAAP'))
TEJ1_2010 <- NAto0(x ='TEJ01_2010',col=c('OERD','OEPRO','Land','LandR','CTP_IFRS_CFI','CTP_IFRS_CFO','CTP_IFRS_CFF','CTP_GAAP'))
control_var <- function(x=TEJ1){
y <- transform(x,
ROA = as.numeric(PTEBX) / as.numeric(TA), # ROA : NetSales / TotalAssets
SIZE = as.numeric(log(x = as.numeric(TA), base = exp(1))), # SIZE : ln(TA)
LEV = as.numeric(TL) / as.numeric(TA), # LEV : TL / TA
INTANG = as.numeric(INTAN) / as.numeric(TA), # INTANG : intangible assets / TA
QUICK = ifelse(is.na(QUICK),0,as.numeric(QUICK)), # QUICK : = QUICK
EQINC = as.numeric(-(InvIn + InvLoss)) / as.numeric(TA), # EQINC : (InvIn + InvLos) / -TA
OUTINSTI = ifelse(is.na(OUTINSTI),0,as.numeric(OUTINSTI)), # OUTINSTI : = OUTINSTI
RELATIN = ifelse(is.na(RELATIN),0,as.numeric(RELATIN)),
RELATOUT = ifelse(is.na(RELATOUT),0,as.numeric(RELATOUT)),
FAM_Dum = ifelse(FAMILY == 'F', 1, 0)
)
DB <- as.data.table(y[order(y$company,y$year),]) # sort by company<ascending> and year<ascending>
return(DB)}
TEJ2 <- control_var(x=TEJ1)
TEJ2_2010 <- control_var(x=TEJ1_2010)
exp_var_STR <- function(x=TEJ1){
y <- transform(x,
CTP_IFRS = as.numeric(-(CTP_IFRS_CFI + CTP_IFRS_CFO + CTP_IFRS_CFF)),
STR_RD = as.numeric(OERD) / as.numeric(NetSales),
STR_EMP = as.numeric(employee) / as.numeric(NetSales),
STR_MB = as.numeric(PB),
STR_MARKET = as.numeric(OEPRO) / as.numeric(NetSales),
STR_PPE = as.numeric( FA - Land - LandR ) / as.numeric(TA)
)
z <- transform(y, CTP = ifelse(year >= 2012,CTP_IFRS,CTP_GAAP)) # combine IFRS as 2012~ , GAAP as ~2011
DB <- as.data.table(z[order(z$company,z$year),]) # sort by company<ascending> and year<ascending>
return(DB)}
TEJ3 <- exp_var_STR(x=TEJ2)
dep_var <- function(x=TEJ2,k=5){
DB01 <- x[,.SD[.N >= k],by=company]
DB02 <- x[,.SD[.N < k],by=company]
DB1 <- DB01[,`:=`(BTE5yrsum = rollapplyr(BTE, width = 5, FUN = sum, fill = NA),
CTP5yrsum = rollapplyr(CTP, width = 5, FUN = sum, fill = NA),
PTEBX5yrsum = rollapplyr(PTEBX, width = 5, FUN = sum, fill = NA)),
by=company]
DB2 <- DB02[,`:=`(BTE5yrsum = NA,CTP5yrsum = NA,PTEBX5yrsum = NA),by=company]
DB3 <- rbind(DB1,DB2)
DB <- transform(DB3,
ETR = as.numeric(BTE5yrsum) / as.numeric(PTEBX5yrsum),
CETR = as.numeric(CTP5yrsum) / as.numeric(PTEBX5yrsum))
return(as.data.table(DB[order(DB$company,DB$year),]))} # add up 5 years moving sum
TEJ3 <- exp_var_STR(x=TEJ2_2010)
TEJ3 <- exp_var_STR(x=TEJ2)
TEJ3_2010 <- exp_var_STR(x=TEJ2_2010)
TEJ4 <- dep_var(TEJ3,k=5)
TEJ4_2010 <- dep_var(TEJ3_2010,k=5)
View(TEJ4)
quit()
